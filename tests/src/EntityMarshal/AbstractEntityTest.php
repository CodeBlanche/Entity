<?php

namespace EntityMarshal;

require_once dirname(__FILE__) . '/../../../src/EntityMarshal/AbstractEntity.php';
require_once dirname(__FILE__) . '/../../_files/ConcreteEntity.php';

use ArrayObject;
use ConcreteEntity;
use PHPUnit_Framework_TestCase;

/**
 * Test class for AbstractEntity.
 * Generated by PHPUnit on 2012-09-23 at 21:46:45.
 */
class AbstractEntityTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var ConcreteEntity
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        parent::setUp();

        $this->object = new ConcreteEntity($this->getSampleDataArray());
    }

    protected function getSampleDataArray()
    {
        return array(
            'isOk' => true,
            'var1' => 'test1',
            'var2' => 'test2',
            'var3' => 'test3',
        );
    }

    /**
     * @covers \EntityMarshal\AbstractEntity::defaultValues
     */
    public function testConstruct()
    {
        $this->object = new ConcreteEntity($this->getSampleDataArray());
    }

    public function testUnsetProperties()
    {
        $this->object->triggerUnsetProperties();
    }

    public function testCall()
    {
        $testValue = 'A B C';
        $testSet = $this->object->triggerCall(
            'setVar1',
            array($testValue)
        );

        $this->assertEquals($this->object, $testSet);

        $testGet = $this->object->triggerCall('getVar1');

        $this->assertEquals($testValue, $testGet);

        $testInvalid = $this->object->triggerCall('var1');

        $this->assertNull($testInvalid);

        $testIs = $this->object->triggerCall('isOk');

        $this->assertTrue($testIs);
    }

    public function testDump()
    {
        $this->expectOutputRegex('/.+/');

        $this->object->dump();
    }

    public function testFromArray()
    {
        $this->object->fromArray($this->getSampleDataArray());
    }

    public function testFromArrayWithTraversable()
    {
        $this->object->fromArray(new ArrayObject($this->getSampleDataArray()));
    }

    /**
     * @expectedException \EntityMarshal\Exception\RuntimeException
     */
    public function testInvalidFromArray()
    {
        $this->object->fromArray('This is not an array');
    }

    /**
     * @depends testFromArray
     */
    public function testGetter()
    {
        $data     = $this->getSampleDataArray();

        $this->object->fromArray($data);

        $expected = $data['var1'];
        $actual   = $this->object->get('var1');

        $this->assertEquals($expected, $actual);
    }

    /**
     * @depends testFromArray
     */
    public function testToArray()
    {
        $expected = $this->getSampleDataArray();
        $actualA  = $this->object->toArray();
        $actualB  = $this->object->toArray(false);

        $this->assertEquals($expected, $actualA);
        $this->assertEquals($expected, $actualB);
    }

    /**
     * @depends testGetter
     * @depends testToArray
     */
    public function testSetter()
    {
        $this->object->set('lumpy', 'custard');

        $data = $this->object->toArray();

        $this->assertEquals('custard', $data['lumpy']);
    }

    public function testIsset()
    {
        $this->assertFalse(isset($this->object->notset));
        $this->assertTrue(isset($this->object->var1));
    }

    /**
     * @depends testIsset
     */
    public function testUnset()
    {
        unset($this->object->var1);

        $this->assertFalse(isset($this->object->var1));

        unset($this->object->nonExistantVar);
    }

    /**
     * @depends testFromArray
     */
    public function testIterable()
    {
        $data = $this->getSampleDataArray();

        $this->object->fromArray($data);

        foreach ($this->object as $key => $actual) {
            $expected = $data[$key];

            $this->assertEquals($expected, $actual);
        }
    }

    /**
     * @depends testFromArray
     * @depends testToArray
     */
    public function testSerializable()
    {
        $data = $this->getSampleDataArray();

        $this->object->fromArray($data);

        $serialized = serialize($this->object);

        $actual = unserialize($serialized);

        $this->assertEquals($this->object, $actual);
    }

    /**
     * @depends testFromArray
     */
    public function testCountable()
    {
        $data = $this->getSampleDataArray();

        $this->object->fromArray($data);

        $expected = count($data);
        $actual   = count($this->object);

        $this->assertEquals($expected, $actual);

    }

    /**
     * @expectedException \EntityMarshal\Exception\RuntimeException
     */
    public function testNonExistentProperty()
    {
        $this->object->get('bacon');
    }

}


