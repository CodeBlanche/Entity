<?php

namespace EntityMarshal\Convert;

/**
 * Test class for PhpArray.
 * Generated by PHPUnit on 2012-09-23 at 21:47:05.
 */
class PhpArrayTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var PhpArray
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new PhpArray(false);
    }

    public function testConstruct()
    {
        $this->object = new PhpArray(false);
    }

    public function testConvert()
    {
        $data = new \ConcreteEntity;
        $objA = new \ConcreteEntity;
        $objB = new \ConcreteEntity;
        $objC = new \ConcreteEntity;
        $objD = new \ConcreteEntity;
        $objE = new \ConcreteEntity;
        $objF = new \stdClass;

        $objF->testVar = 'testValue';

        $objE->set('obj', $objF);
        $objD->set('obj', $objE);
        $objC->set('obj', $objD);
        $objB->set('obj', $objC);
        $objA->set('obj', $objB);
        $data->set('obj', $objA);

        $actual = $this->object->convert($data);
        $this->assertTrue(is_array($actual));
    }

    /**
     * @expectedException \EntityMarshal\Convert\Exception\RuntimeException
     */
    public function testCircularReference()
    {
        $data = new \ConcreteEntity;
        $objA = new \ConcreteEntity;
        $objB = new \ConcreteEntity;
        $objC = new \ConcreteEntity;
        $objD = new \ConcreteEntity;
        $objE = new \ConcreteEntity;
        $objF = new \stdClass;

        $objF->obj = $objA;

        $objE->set('obj', $objF);
        $objD->set('obj', $objE);
        $objC->set('obj', $objD);
        $objB->set('obj', $objC);
        $objA->set('obj', $objB);
        $data->set('obj', $objA);

        $actual = $this->object->convert($data);

        $this->assertNull($actual['obj']['obj']['obj']['obj']['obj']['obj']['obj']);
    }

    public function testGracefulCircularReference()
    {
        $object = new PhpArray(true);

        $data = new \ConcreteEntity;
        $objA = new \ConcreteEntity;
        $objB = new \ConcreteEntity;
        $objC = new \ConcreteEntity;
        $objD = new \ConcreteEntity;
        $objE = new \ConcreteEntity;
        $objF = new \stdClass;

        $objF->obj = $objA;

        $objE->set('obj', $objF);
        $objD->set('obj', $objE);
        $objC->set('obj', $objD);
        $objB->set('obj', $objC);
        $objA->set('obj', $objB);
        $data->set('obj', $objA);

        $actual = $object->convert($data);

        $this->assertNull($actual['obj']['obj']['obj']['obj']['obj']['obj']['obj']);
    }

}


